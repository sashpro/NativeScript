"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var core_2 = require("@angular/core");
var common_1 = require("@angular/common");
var index_1 = require("./../_services/index");
var index_2 = require("./../_services/index");
var DashboardComponent = (function () {
    function DashboardComponent(datePipe, rateFeeService, walletService) {
        this.datePipe = datePipe;
        this.rateFeeService = rateFeeService;
        this.walletService = walletService;
        this.dataFRGC = [{ key: "FRGC",
                values: [],
                area: true }];
        this.dataBTC = [{ key: "BTC",
                values: [],
                area: true }];
        this.currency = 'FRGC';
    }
    DashboardComponent.prototype.ngOnInit = function () {
        var _this = this;
        var dateToday = new Date();
        var dateMonthAgo = this.datePipe.transform(new Date(dateToday.setMonth(dateToday.getMonth() - 1)), 'y-MM-dd');
        this.walletService.getWallets()
            .subscribe(function (data) { _this.wallets = data; });
        this.rateFeeService.getRates(dateMonthAgo)
            .subscribe(function (data) {
            for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
                var rate = data_1[_i];
                if (rate.pair.right_currency == 'FRGC') {
                    _this.dataFRGC[0].values.push([Date.parse(rate.create_dt), rate.buy_rate]);
                }
                else if (rate.pair.right_currency == 'BTC') {
                    _this.dataBTC[0].values.push([Date.parse(rate.create_dt), rate.buy_rate]);
                }
            }
            _this.data = _this.dataFRGC;
        });
        this.options = {
            chart: {
                type: 'lineChart',
                height: 350,
                margin: { top: 20, right: 20, bottom: 50, left: 60 },
                x: function (d) { return d[0]; },
                y: function (d) { return d[1]; },
                color: d3.scale.category10().range(),
                duration: 300,
                useInteractiveGuideline: true,
                clipVoronoi: false,
                xAxis: { tickFormat: function (d) { return d3.time.format('%m/%d/%y')(new Date(d)); },
                    showMaxMin: false },
                yAxis: { tickFormat: function (d) { return d3.format(',.2f')(d); } }
            }
        };
    };
    DashboardComponent.prototype.changeCurrency = function (currency) {
        this.currency = currency;
        if (currency == 'FRGC') {
            this.data = this.dataFRGC;
        }
        else if (currency == 'BTC') {
            this.data = this.dataBTC;
        }
    };
    DashboardComponent = __decorate([
        core_1.Component({
            selector: 'dashboard',
            templateUrl: './dashboard.component.html',
            styleUrls: ['./dashboard.component.css',
                './../../../node_modules/nvd3/build/nv.d3.css'],
            encapsulation: core_2.ViewEncapsulation.None
        }),
        __metadata("design:paramtypes", [common_1.DatePipe,
            index_1.RateFeeService,
            index_2.WalletService])
    ], DashboardComponent);
    return DashboardComponent;
}());
exports.DashboardComponent = DashboardComponent;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGFzaGJvYXJkLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImRhc2hib2FyZC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxzQ0FBMkU7QUFFM0Usc0NBQTJFO0FBQzNFLDBDQUE2RTtBQUU3RSw4Q0FBa0Y7QUFDbEYsOENBQWtGO0FBWWxGO0lBYUksNEJBQXFCLFFBQWtCLEVBQ2xCLGNBQThCLEVBQzlCLGFBQTRCO1FBRjVCLGFBQVEsR0FBUixRQUFRLENBQVU7UUFDbEIsbUJBQWMsR0FBZCxjQUFjLENBQWdCO1FBQzlCLGtCQUFhLEdBQWIsYUFBYSxDQUFlO1FBWGpELGFBQVEsR0FBRyxDQUFFLEVBQUUsR0FBRyxFQUFFLE1BQU07Z0JBQ1gsTUFBTSxFQUFFLEVBQUc7Z0JBQ1gsSUFBSSxFQUFFLElBQUksRUFBRSxDQUFFLENBQUM7UUFDOUIsWUFBTyxHQUFHLENBQUUsRUFBRSxHQUFHLEVBQUUsS0FBSztnQkFDVixNQUFNLEVBQUUsRUFBRztnQkFDWCxJQUFJLEVBQUUsSUFBSSxFQUFFLENBQUUsQ0FBQztRQUU3QixhQUFRLEdBQUcsTUFBTSxDQUFDO0lBSXFDLENBQUM7SUFFeEQscUNBQVEsR0FBUjtRQUFBLGlCQWdDQztRQS9CRyxJQUFJLFNBQVMsR0FBRyxJQUFJLElBQUksRUFBRSxDQUFDO1FBQzNCLElBQUksWUFBWSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLFFBQVEsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsU0FBUyxDQUFDLENBQUM7UUFDOUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxVQUFVLEVBQUU7YUFDMUIsU0FBUyxDQUFDLFVBQUEsSUFBSSxJQUFLLEtBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFBLENBQUEsQ0FBQyxDQUFDLENBQUM7UUFDOUMsSUFBSSxDQUFDLGNB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O1lBQ3JCLFdBQVcsRUFBRSw0QkFBNEI7WUFDekMsU0FBUyxFQUFFLENBQUMsMkJBQTJCO2dCQUMzQiw4Q0FBOEMsQ0FBQztZQUMzRCxhQUFhLEVBQUUsd0JBQWlCLENBQUMsSUFBSTtTQUN4QyxDQUFDO3lDQWNpQyxpQkFBUTtZQUNGLHNCQUFjO1lBQ2YscUJBQWE7T0FmeEMsa0JBQWtCLENBNEQ5QjtJQUFELHlCQUFDO0NBQUEsQUE1REQsSUE0REM7QUE1RFksZ0RBQWtCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50IH0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBPbkluaXQgfSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFZpZXdFbmNhcHN1bGF0aW9uIH0gICAgICAgICAgICAgICAgICAgICAgICAgIGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRGF0ZVBpcGUgfSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcblxuaW1wb3J0IHsgUmF0ZUZlZVNlcnZpY2UgfSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnJvbSAnLi8uLi9fc2VydmljZXMvaW5kZXgnO1xuaW1wb3J0IHsgV2FsbGV0U2VydmljZSB9ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnJvbSAnLi8uLi9fc2VydmljZXMvaW5kZXgnO1xuXG5kZWNsYXJlIGxldCBkMzogYW55O1xuXG5cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAnZGFzaGJvYXJkJyxcbiAgICB0ZW1wbGF0ZVVybDogJy4vZGFzaGJvYXJkLmNvbXBvbmVudC5odG1sJyxcbiAgICBzdHlsZVVybHM6IFsnLi9kYXNoYm9hcmQuY29tcG9uZW50LmNzcycsXG4gICAgICAgICAgICAgICAgJy4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL252ZDMvYnVpbGQvbnYuZDMuY3NzJ10sXG4gICAgZW5jYXBzdWxhdGlvbjogVmlld0VuY2Fwc3VsYXRpb24uTm9uZVxufSlcbmV4cG9ydCBjbGFzcyBEYXNoYm9hcmRDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuXG4gICAgd2FsbGV0czogYW55O1xuICAgIG9wdGlvbnM6IGFueTtcbiAgICBkYXRhRlJHQyA9IFsgeyBrZXk6IFwiRlJHQ1wiLFxuICAgICAgICAgICAgICAgICAgIHZhbHVlczogWyBdLFxuICAgICAgICAgICAgICAgICAgIGFyZWE6IHRydWUgfSBdO1xuICAgIGRhdGFCVEMgPSBbIHsga2V5OiBcIkJUQ1wiLFxuICAgICAgICAgICAgICAgICAgdmFsdWVzOiBbIF0sXG4gICAgICAgICAgICAgICAgICBhcmVhOiB0cnVlIH0gXTtcbiAgICBkYXRhOiBhbnk7XG4gICAgY3VycmVuY3kgPSAnRlJHQyc7XG5cbiAgICBjb25zdHJ1Y3RvciggcHJpdmF0ZSBkYXRlUGlwZTogRGF0ZVBpcGUsXG4gICAgICAgICAgICAgICAgIHByaXZhdGUgcmF0ZUZlZVNlcnZpY2U6IFJhdGVGZWVTZXJ2aWNlLFxuICAgICAgICAgICAgICAgICBwcml2YXRlIHdhbGxldFNlcnZpY2U6IFdhbGxldFNlcnZpY2UsICkgeyB9XG5cbiAgICBuZ09uSW5pdCgpIHtcbiAgICAgICAgdmFyIGRhdGVUb2RheSA9IG5ldyBEYXRlKCk7XG4gICAgICAgIHZhciBkYXRlTW9udGhBZ28gPSB0aGlzLmRhdGVQaXBlLnRyYW5zZm9ybShuZXcgRGF0ZShkYXRlVG9kYXkuc2V0TW9udGgoZGF0ZVRvZGF5LmdldE1vbnRoKCkgLSAxKSksICd5LU1NLWRkJyk7XG4gICAgICAgIHRoaXMud2FsbGV0U2VydmljZS5nZXRXYWxsZXRzKClcbiAgICAgICAgICAgIC5zdWJzY3JpYmUoZGF0YSA9PiB7dGhpcy53YWxsZXRzID0gZGF0YX0pO1xuICAgICAgICB0aGlzLnJhdGVGZWVTZXJ2aWNlLmdldFJhdGVzKGRhdGVNb250aEFnbylcbiAgICAgICAgICAgIC5zdWJzY3JpYmUoZGF0YSA9PiB7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgcmF0ZSBvZiBkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICggcmF0ZS5wYWlyLnJpZ2h0X2N1cnJlbmN5ID09ICdGUkdDJyApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGF0YUZSR0NbMF0udmFsdWVzLnB1c2goWyBEYXRlLnBhcnNlKHJhdGUuY3JlYXRlX2R0KSwgcmF0ZS5idXlfcmF0ZV0pO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCByYXRlLnBhaXIucmlnaHRfY3VycmVuY3kgPT0gJ0JUQycgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRhdGFCVENbMF0udmFsdWVzLnB1c2goW0RhdGUucGFyc2UocmF0ZS5jcmVhdGVfZHQpLCByYXRlLmJ1eV9yYXRlXSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5kYXRhID0gdGhpcy5kYXRhRlJHQzt9KTtcblxuICAgICAgICB0aGlzLm9wdGlvbnMgPSB7XG4gICAgICAgICAgICBjaGFydDoge1xuICAgICAgICAgICAgICAgIHR5cGU6ICdsaW5lQ2hhcnQnLFxuICAgICAgICAgICAgICAgIGhlaWdodDogMzUwLFxuICAgICAgICAgICAgICAgIG1hcmdpbiA6IHsgdG9wOiAyMCwgcmlnaHQ6IDIwLCBib3R0b206IDUwLCBsZWZ0OiA2MCB9LFxuICAgICAgICAgICAgICAgIHg6IGZ1bmN0aW9uKGQpeyByZXR1cm4gZFswXTsgfSxcbiAgICAgICAgICAgICAgICB5OiBmdW5jdGlvbihkKXsgcmV0dXJuIGRbMV07IH0sXG4gICAgICAgICAgICAgICAgY29sb3I6IGQzLnNjYWxlLmNhdGVnb3J5MTAoKS5yYW5nZSgpLFxuICAgICAgICAgICAgICAgIGR1cmF0aW9uOiAzMDAsXG4gICAgICAgICAgICAgICAgdXNlSW50ZXJhY3RpdmVHdWlkZWxpbmU6IHRydWUsXG4gICAgICAgICAgICAgICAgY2xpcFZvcm9ub2k6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHhBeGlzOiB7IHRpY2tGb3JtYXQ6IGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGQzLnRpbWUuZm9ybWF0KCclbS8lZC8leScpKG5ldyBEYXRlKGQpKSB9LFxuICAgICAgICAgICAgICAgICAgICBzaG93TWF4TWluOiBmYWxzZSB9LFxuICAgICAgICAgICAgICAgIHlBeGlzOiB7IHRpY2tGb3JtYXQ6IGZ1bmN0aW9uKGQpeyByZXR1cm4gZDMuZm9ybWF0KCcsLjJmJykoZCk7IH0gfVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH1cblxuICAgIGNoYW5nZUN1cnJlbmN5KCBjdXJyZW5jeTogc3RyaW5nICkge1xuICAgICAgICB0aGlzLmN1cnJlbmN5ID0gY3VycmVuY3k7XG4gICAgICAgIGlmIChjdXJyZW5jeT09J0ZSR0MnKSB7XG4gICAgICAgICAgICB0aGlzLmRhdGEgPSB0aGlzLmRhdGFGUkdDO1xuICAgICAgICB9IGVsc2UgaWYgKGN1cnJlbmN5PT0nQlRDJykge1xuICAgICAgICAgICAgdGhpcy5kYXRhID0gdGhpcy5kYXRhQlRDO1xuICAgICAgICB9XG4gICAgfVxuXG59XG4iXX0=