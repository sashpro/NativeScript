"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var forms_1 = require("@angular/forms");
var index_1 = require("../_services/index");
var index_2 = require("../_models/index");
var BuySellSellComponent = (function () {
    function BuySellSellComponent(walletService, buySellService) {
        this.walletService = walletService;
        this.buySellService = buySellService;
        this.operation = "SELL";
        this.currencyTo = 'USD';
        this.sellModel = new index_2.Exchange;
        this.exchangeRateModel = new index_2.ExchangeRate;
        this.messageSuccess = false;
        this.sellForm = new forms_1.FormGroup({
            "wallet_from": new forms_1.FormControl("", forms_1.Validators.required),
            "wallet_to": new forms_1.FormControl("", forms_1.Validators.required),
            "amount": new forms_1.FormControl("", [forms_1.Validators.required, forms_1.Validators.min(0)]),
            "other_amount": new forms_1.FormControl("", forms_1.Validators.min(0)),
            "message": new forms_1.FormControl("")
        });
    }
    BuySellSellComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.walletService.getWallets()
            .subscribe(function (data) {
            _this.wallets = data;
            _this.walletsFrom = _this.wallets.filter(function (wallet) { return wallet.currency != _this.currencyTo; });
            _this.walletsTo = _this.wallets.filter(function (wallet) { return wallet.currency == _this.currencyTo; });
        });
        this.newSellModel();
        this.exchangeRateModel["operation"] = this.operation;
        this.exchangeRateModel["wallet_to_currency"] = this.currencyTo;
    };
    BuySellSellComponent.prototype.newSellModel = function () {
        this.sellModel = this.buySellService.newSellExchangeModel();
    };
    BuySellSellComponent.prototype.getRate = function (wallet_from) {
        var _this = this;
        if (wallet_from) {
            this.exchangeRateModel["wallet_from_currency"] = this.sellModel.wallet_from.currency;
            this.sellModel.amount = 0;
            this.sellModel.other_amount = 0;
            this.buySellService.exchangeRate(this.exchangeRateModel)
                .subscribe(function (data) { _this.sellModel.rate = data; });
        }
    };
    BuySellSellComponent.prototype.amountToUSD = function (amount) {
        if (amount) {
            var other_amount = Number(amount) * this.sellModel.rate;
            this.sellModel.other_amount = Number(other_amount.toFixed(2));
        }
        else {
            this.sellModel.amount = 0;
            this.sellModel.other_amount = 0;
        }
    };
    BuySellSellComponent.prototype.USDtoAmount = function (USD) {
        if (USD) {
            var amount = Number(USD) / this.sellModel.rate;
            this.sellModel.amount = Number(amount.toFixed(8));
        }
        else {
            this.sellModel.amount = 0;
            this.sellModel.other_amount = 0;
        }
    };
    BuySellSellComponent.prototype.sell = function () {
        var _this = this;
        this.messageSuccess = false;
        this.messageError = '';
        this.buySellService.exchange(this.sellModel)
            .subscribe(function (data) {
            _this.messageSuccess = true;
            _this.sellForm.reset();
            _this.newSellModel();
        }, function (error) { _this.messageError = error.detail; });
    };
    BuySellSellComponent = __decorate([
        core_1.Component({
            selector: 'buy-sell-sell',
            templateUrl: './buy-sell-sell.component.html',
            styleUrls: ['./buy-sell-sell.component.css']
        }),
        __metadata("design:paramtypes", [index_1.WalletService,
            index_1.BuySellService])
    ], BuySellSellComponent);
    return BuySellSellComponent;
}());
exports.BuySellSellComponent = BuySellSellComponent;
//# sourceMappingURL=data:application/json;base64,