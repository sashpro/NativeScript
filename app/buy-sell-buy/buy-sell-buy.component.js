"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var forms_1 = require("@angular/forms");
var index_1 = require("../_services/index");
var index_2 = require("../_models/index");
var BuySellBuyComponent = (function () {
    function BuySellBuyComponent(buySellService, walletService) {
        this.buySellService = buySellService;
        this.walletService = walletService;
        this.operation = "BUY";
        this.currencyFrom = 'USD';
        this.buyModel = new index_2.Exchange;
        this.exchangeRateModel = new index_2.ExchangeRate;
        this.messageSuccess = false;
        this.buyForm = new forms_1.FormGroup({
            "wallet_from": new forms_1.FormControl("", forms_1.Validators.required),
            "wallet_to": new forms_1.FormControl("", forms_1.Validators.required),
            "amount": new forms_1.FormControl("", [forms_1.Validators.required, forms_1.Validators.min(0)]),
            "other_amount": new forms_1.FormControl("", forms_1.Validators.min(0)),
            "message": new forms_1.FormControl("")
        });
    }
    BuySellBuyComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.walletService.getWallets()
            .subscribe(function (data) {
            _this.wallets = data;
            _this.walletsFrom = _this.wallets.filter(function (wallet) { return wallet.currency == _this.currencyFrom; });
            _this.walletsTo = _this.wallets.filter(function (wallet) { return wallet.currency != _this.currencyFrom; });
        });
        this.newBuyModel();
        this.exchangeRateModel["operation"] = this.operation;
        this.exchangeRateModel["wallet_from_currency"] = this.currencyFrom;
    };
    BuySellBuyComponent.prototype.newBuyModel = function () {
        this.buyModel = this.buySellService.newBuyExchangeModel();
    };
    BuySellBuyComponent.prototype.getRate = function (wallet_to) {
        var _this = this;
        if (wallet_to) {
            this.exchangeRateModel["wallet_to_currency"] = wallet_to.currency;
            this.buyModel.amount = 0;
            this.buyModel.other_amount = 0;
            this.buySellService.exchangeRate(this.exchangeRateModel)
                .subscribe(function (data) { _this.buyModel.rate = data; });
        }
    };
    BuySellBuyComponent.prototype.amountToUSD = function (amount) {
        if (amount) {
            var other_amount = Number(amount) * this.buyModel.rate;
            this.buyModel.other_amount = Number(other_amount.toFixed(2));
        }
        else {
            this.buyModel.amount = 0;
            this.buyModel.other_amount = 0;
        }
    };
    BuySellBuyComponent.prototype.USDtoAmount = function (USD) {
        if (USD) {
            var amount = Number(USD) / this.buyModel.rate;
            this.buyModel.amount = Number(amount.toFixed(8));
        }
        else {
            this.buyModel.amount = 0;
            this.buyModel.other_amount = 0;
        }
    };
    BuySellBuyComponent.prototype.buy = function () {
        var _this = this;
        this.messageSuccess = false;
        this.messageError = '';
        this.buySellService.exchange(this.buyModel)
            .subscribe(function (data) {
            _this.messageSuccess = true;
            _this.buyForm.reset();
            _this.newBuyModel();
        }, function (error) { _this.messageError = error.detail; });
    };
    BuySellBuyComponent = __decorate([
        core_1.Component({
            selector: 'buy-sell-buy',
            templateUrl: './buy-sell-buy.component.html',
            styleUrls: ['./buy-sell-buy.component.css']
        }),
        __metadata("design:paramtypes", [index_1.BuySellService,
            index_1.WalletService])
    ], BuySellBuyComponent);
    return BuySellBuyComponent;
}());
exports.BuySellBuyComponent = BuySellBuyComponent;
//# sourceMappingURL=data:application/json;base64,